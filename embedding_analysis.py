"""
This file use the image and text embeddings generated by the CLIP-based models to create PCA and t-SNE plots.
Use this file once the embeddings have been generated and save in data/embedding
The plots will be saved in reports/figures/PCA and reports/figures/TSNE
"""


from sklearn.decomposition import PCA
from sklearn.manifold import TSNE

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import numpy as np
from PIL import Image
import seaborn as sns
import argparse
from pathlib import Path
np.random.seed(1907)

parser = argparse.ArgumentParser()
parser.add_argument('--model_name', default='medclip')
parser.add_argument('--projection_type', default='PCA')

args, unknown = parser.parse_known_args()
model_name = args.model_name
projection_type = args.projection_type

df = pd.read_csv(f'./data/test_preproc_filtered.csv')
df = df.dropna(subset=["findings"])

embeddings_images = np.load(f'./data/embeddings/MIMIC/MIMIC_{model_name}_images.npy')
embeddings_texts = np.load(f'./data/embeddings/MIMIC/MIMIC_{model_name}_texts.npy')

embeddings = np.concatenate((embeddings_images, embeddings_texts), axis=0)
embedding_type = ["images" if i < len(embeddings_images) else "texts" for i in range(len(embeddings))] #0 for image embeddings and 1 for text embeddings

if projection_type == "PCA":
    projection = PCA(n_components=2,random_state=1907)
elif projection_type == "TSNE":
    projection = TSNE(n_components=2, learning_rate="auto",random_state=1907)

Path(f"./reports/figures/{projection_type}/{model_name}").mkdir(parents=True, exist_ok=True)

projection_imagestexts = projection.fit_transform(embeddings)
projection_images = projection.fit_transform(embeddings_images)
projection_texts = projection.fit_transform(embeddings_texts)

sns.set_theme(style="white", palette=None)
fig = sns.jointplot(x=projection_imagestexts[:,0], y=projection_imagestexts[:,1], xlim=(min(-1,min(projection_imagestexts[:,0])),max(1,max(projection_imagestexts[:,0]))), ylim=(min(-1,min(projection_imagestexts[:,1])),max(1,max(projection_imagestexts[:,1]))), hue=embedding_type, kind='scatter', alpha=0.6, marker='o', s=40, hue_order=["images","texts"], joint_kws=dict(rasterized=True))
fig.ax_joint.legend(loc='upper right')
plt.xlabel(f"{projection_type} 1")
plt.ylabel(f"{projection_type} 2")
plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_modality.png", bbox_inches='tight', dpi=300)



characteristics = {
    "sex":df["sex"].unique(),
    "race":df["race"].unique(),
    "disease":df["disease"].unique(),
    "ViewPosition":df["ViewPosition"].unique()
}

for charac in characteristics:

    lst_charac = df[charac].tolist()
    # if charac == "disease":
    #     lst_charac = ["Normal" if c == "No Finding" else "Abnormal" for c in lst_charac]

    #Both image and text embeddings
    sns.set_theme(style="white", palette=None)
    fig = sns.jointplot(x=projection_imagestexts[:,0], y=projection_imagestexts[:,1], hue=np.concatenate((lst_charac, lst_charac),axis=0), kind='scatter', alpha=0.6, marker='o', s=40, hue_order=characteristics[charac], joint_kws=dict(rasterized=True))
    fig.ax_joint.legend(loc='upper right')
    plt.xlabel(f"{projection_type} 1")
    plt.ylabel(f"{projection_type} 2")
    plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_{charac.lower()}_imagestexts.png", bbox_inches='tight', dpi=300)


    #Only image embeddings
    sns.set_theme(style="white", palette=None)
    fig = sns.jointplot(x=projection_imagestexts[:len(embeddings_images),0], y=projection_images[:len(embeddings_images),1], hue=lst_charac, kind='scatter', alpha=0.6, marker='o', s=40, hue_order=characteristics[charac], joint_kws=dict(rasterized=True))
    fig.ax_joint.legend(loc='upper right')
    plt.xlabel(f"{projection_type} 1")
    plt.ylabel(f"{projection_type} 2")
    plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_{charac.lower()}_images.png", bbox_inches='tight', dpi=300)


    #Only text embeddings
    sns.set_theme(style="white", palette=None)
    fig = sns.jointplot(x=projection_imagestexts[len(embeddings_images):,0], y=projection_imagestexts[len(embeddings_images):,1], hue=lst_charac, kind='scatter', alpha=0.6, marker='o', s=40, hue_order=characteristics[charac], joint_kws=dict(rasterized=True))
    fig.ax_joint.legend(loc='upper right')
    plt.xlabel(f"{projection_type} 1")
    plt.ylabel(f"{projection_type} 2")
    plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_{charac.lower()}_texts.png", bbox_inches='tight', dpi=300) 