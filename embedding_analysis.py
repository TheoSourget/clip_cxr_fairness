"""
This file use the image and text embeddings generated by the CLIP-based models to create PCA and t-SNE plots.
Use this file once the embeddings have been generated and save in data/embedding
The plots will be saved in reports/figures/PCA and reports/figures/TSNE
"""


from sklearn.decomposition import PCA
from sklearn.manifold import TSNE

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import numpy as np
from PIL import Image
import seaborn as sns
import argparse
from pathlib import Path
np.random.seed(1907)

parser = argparse.ArgumentParser()
parser.add_argument('--model_name', default='medclip')
parser.add_argument('--dataset', default='MIMIC')
parser.add_argument('--projection_type', default='PCA')

args, unknown = parser.parse_known_args()
model_name = args.model_name
projection_type = args.projection_type

#Load the labels and attribute to use as groups
if args.dataset == "MIMIC":
    df = pd.read_csv(f'./data/test_preproc_filtered.csv')
    df = df.dropna(subset=["findings"])
    df["age"] = df["age"].astype(int)
    df["age_label"] = pd.cut(df["age"],bins=[18,25,50,65,80,np.inf],labels=["18-25","25-50","50-65","65-80","80+"],right=False)
    characteristics = {
        "sex":df["sex"].unique(),
        "race":df["race"].unique(),
        "age_label":df["age_label"].unique()
    }
elif args.dataset == "CXR14":
    cxr14_path = "/gpfs/workdir/sourgetth/datasets/processed/CXR14"
    df = pd.read_csv(f'{cxr14_path}/processed_labels_alldrains.csv')
    characteristics = {
        "drains":df["Drain"].unique(),
    }

#Load image and text embeddings
embeddings_images = np.load(f'./data/embeddings/{args.dataset}/{args.dataset}_{model_name}_images.npy')
embeddings_texts = np.load(f'./data/embeddings/{args.dataset}/{args.dataset}_{model_name}_texts.npy')

embeddings = np.concatenate((embeddings_images, embeddings_texts), axis=0)
embedding_type = ["images" if i < len(embeddings_images) else "texts" for i in range(len(embeddings))] #0 for image embeddings and 1 for text embeddings

if projection_type == "PCA":
    projection = PCA(n_components=2,random_state=1907)
elif projection_type == "TSNE":
    projection = TSNE(n_components=2, learning_rate="auto",random_state=1907)

#If needed create the folder to save the plots
Path(f"./reports/figures/{projection_type}/{model_name}").mkdir(parents=True, exist_ok=True)

#Project the embeddings using the algorithm chosen
projection_imagestexts = projection.fit_transform(embeddings)
projection_images = projection.fit_transform(embeddings_images)
projection_texts = projection.fit_transform(embeddings_texts)


#Colored by the modality (see Fig 2.a)
sns.set_theme(style="white", palette=None)
fig = sns.jointplot(x=projection_imagestexts[:,0], y=projection_imagestexts[:,1], xlim=(min(-1,min(projection_imagestexts[:,0])),max(1,max(projection_imagestexts[:,0]))), ylim=(min(-1,min(projection_imagestexts[:,1])),max(1,max(projection_imagestexts[:,1]))), hue=embedding_type, kind='scatter', alpha=0.6, marker='o', s=40, hue_order=["images","texts"], joint_kws=dict(rasterized=True))
fig.ax_joint.legend(loc='upper right')
plt.xlabel(f"{projection_type} 1")
plt.ylabel(f"{projection_type} 2")
plt.axis('off')
plt.legend(fontsize='large')
plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_modality.png", bbox_inches='tight', dpi=300)
plt.close()

Path(f"./reports/figures/diff_embeddings/{model_name}").mkdir(parents=True, exist_ok=True)
#Compute the centroid (mean) of image and text embeddings
centroid_img = embeddings_images.mean(axis=0)
centroid_txt = embeddings_texts.mean(axis=0)

#Compute and order the difference at each dimensions between the two cendroids (see Fig 3.a)
diff = np.abs(centroid_img - centroid_txt)
diff_ordered = diff[np.argsort(diff)[::-1]]
plt.figure()
plt.plot(range(len(diff)),diff_ordered)
plt.xlabel("Sorted embedding dimension",fontdict = {'fontsize' : 15})
plt.ylabel("Absolute difference between the centroids",fontdict = {'fontsize' : 15})
plt.savefig(f"./reports/figures/diff_embeddings/{model_name}/diff_{model_name}_modalities.png")
plt.close()

#Plot for each attribute the scatter plot colored on this attribute (See Fig 2.b-d) and the difference of centroid (Fig 3.b)
for charac in characteristics:
    Path(f"./reports/figures/diff_embeddings/{model_name}/{charac}").mkdir(parents=True, exist_ok=True)

    lst_charac = df[charac].tolist()

    #Both image and text embeddings
    sns.set_theme(style="white", palette=None)
    fig = sns.jointplot(x=projection_imagestexts[:,0], y=projection_imagestexts[:,1], hue=np.concatenate((lst_charac, lst_charac),axis=0), kind='scatter', alpha=0.6, marker='o', s=40, hue_order=characteristics[charac], joint_kws=dict(rasterized=True))
    fig.ax_joint.legend(loc='upper right')
    plt.xlabel(f"{projection_type} 1")
    plt.ylabel(f"{projection_type} 2")
    plt.axis('off')
    plt.legend(fontsize='large')
    plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_{charac.lower()}_imagestexts.png", bbox_inches='tight', dpi=300)
    plt.close()


    #Only image embeddings
    sns.set_theme(style="white", palette=None)
    fig = sns.jointplot(x=projection_imagestexts[:len(embeddings_images),0], y=projection_images[:len(embeddings_images),1], hue=lst_charac, kind='scatter', alpha=0.6, marker='o', s=40, hue_order=characteristics[charac], joint_kws=dict(rasterized=True))
    fig.ax_joint.legend(loc='upper right')
    plt.xlabel(f"{projection_type} 1")
    plt.ylabel(f"{projection_type} 2")
    plt.axis('off')
    plt.legend(fontsize='large')
    plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_{charac.lower()}_images.png", bbox_inches='tight', dpi=300)
    plt.close()


    #Only text embeddings
    sns.set_theme(style="white", palette=None)
    fig = sns.jointplot(x=projection_imagestexts[len(embeddings_images):,0], y=projection_imagestexts[len(embeddings_images):,1], hue=lst_charac, kind='scatter', alpha=0.6, marker='o', s=40, hue_order=characteristics[charac], joint_kws=dict(rasterized=True))
    fig.ax_joint.legend(loc='upper right')
    plt.xlabel(f"{projection_type} 1")
    plt.ylabel(f"{projection_type} 2")
    plt.axis('off')
    plt.legend(fontsize='large')
    plt.savefig(f"./reports/figures/{projection_type}/{model_name}/{projection_type}_{model_name}_{charac.lower()}_texts.png", bbox_inches='tight', dpi=300)
    plt.close()
    
    #For each group compute the cendroid (mean) of its embeddings
    centroid_groups = []
    for group in characteristics[charac]:
        current_group_embeddings = embeddings_images[np.where(np.array(lst_charac)==group)]
        centroid_groups.append(current_group_embeddings.mean(axis=0))

    #For each pair of group compute the difference between each dimensions of their centroid, ordered it from the biggest difference to the smallest and plot it
    for i in range(len(centroid_groups)-1):
        emb1 = centroid_groups[i]
        for j in range(i+1,len(centroid_groups)):
            emb2 = centroid_groups[j]
            if i != j:
                diff = np.abs(emb1 - emb2)
                diff_ordered = diff[np.argsort(diff)[::-1]]
                plt.figure()
                plt.plot(range(len(diff)),diff_ordered)
                plt.xlabel("Sorted embedding dimension",fontdict = {'fontsize' : 15})
                plt.ylabel("Absolute difference between the centroids",fontdict = {'fontsize' : 15})
                plt.savefig(f"./reports/figures/diff_embeddings/{model_name}/{charac}/diff_{model_name}_{charac}_{characteristics[charac][i]}_{characteristics[charac][j]}.png")
                plt.close()
        